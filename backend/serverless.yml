service: serverless-imageautotag-app

frameworkVersion: '2'

plugins:
  - serverless-webpack
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation
  - serverless-iam-roles-per-function
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-plugin-tracing

package:
  individually: true

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'} # TODO Change with your region

  tracing: true

  environment:
    IMAGES_TABLE: Images-${self:provider.stage}
    IMAGES_CREATED_AT_INDEX: Images-CreatedAtIndex-${self:provider.stage}
    IMAGESID_INDEX: ImagesId-Index-${self:provider.stage}
    IMAGES_S3_BUCKET: images-cmi-${self:provider.stage} # TODO   Change: it must be globally unique 
    SIGNED_URL_EXPIRATION: 300
    REKOGNITION_MAX_LABELS: 5
    TAG_CREATION_TOPIC_ARN: 
      Fn::Join:
              - ':'
              - - arn:aws:sns
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - ${self:custom.tagTopicName}
  
    
  iamRoleStatements:
    - Effect: "Allow" # xray permissions
      Action:
        - "xray:PutTraceSegments"
        - "xray:PutTelemetryRecords"
      Resource:
        - "*"


custom:
  webpack:
    webpackConfig: "./webpack.config.js"
    includeModules: true

  uploadTopicName: imgUploadTopic-${self:provider.stage}
  tagTopicName: tagsCreationTopic-${self:provider.stage}

  serverless-offline:
    port: 3003

  dynamodb:
    start:
        port: 8000
        inMemory: true
        migrate: true
  
  

  documentation:
    api:
      info:
        version: v1.0.0
        title: Serverless Image Autotag API
        description: Serverless application to manage Images and detected Tags using Rekognition AI
    models:
      - name: CreateImgRequest
        contentType: application/json
        schema: ${file(models/create-img-request.json)}
      - name: UpdateImgRequest
        contentType: application/json
        schema: ${file(models/update-img-request.json)}




functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  
  GetImages:
    handler: src/lambda/http/getImgs.handler
    events:
      - http:
          method: get
          path: images
          cors: true
          authorizer: Auth    
          documentation:
            summary: "Get images"
            descriptrion: "Get a list of images by user"            
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IMAGES_TABLE}/index/${self:provider.environment.IMAGES_CREATED_AT_INDEX}

  GetImage:
    handler: src/lambda/http/getImg.handler
    events:
      - http:
          method: get
          path: images/{imgId}
          cors: true
          authorizer: Auth
          documentation:
            summary: "Get one image"
            descriptrion: "Get signle image by imgId"     
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IMAGES_TABLE}

  GetImagesByTag:
    handler: src/lambda/http/getImgsByTag.handler
    events:
      - http:
          method: get
          path: images/tags
          cors: true
          authorizer: Auth
          reqValidatorName: RequestParamValidator
          request:
            parameters:
              querystrings:
                tag: true
          documentation:
            summary: "Get images by tag name"
            descriptrion: "Get a list of images by user and tag name"
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IMAGES_TABLE}/index/${self:provider.environment.IMAGES_CREATED_AT_INDEX}

  CreateImg:
    handler: src/lambda/http/createImg.handler
    events:
      - http:
          method: post
          path: images
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new image 
            description: Create a new image
            requestModels:
              'application/json': CreateImgRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
        - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IMAGES_TABLE}        

 
  UpdateImg:
    handler: src/lambda/http/updateImg.handler
    events:
      - http:
          method: patch
          path: images/{imgId}
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update existing image
            description: Update existing image
            requestModels:
              'application/json': UpdateImgRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IMAGES_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IMAGES_TABLE}/index/${self:provider.environment.IMAGESID_INDEX}
      - Effect: Allow
        Action:
        - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IMAGES_TABLE}

  
  DeleteImg:
    handler: src/lambda/http/deleteImg.handler
    events:
      - http:
          method: delete
          path: images/{imgId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IMAGES_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IMAGES_TABLE}/index/${self:provider.environment.IMAGESID_INDEX}
      - Effect: Allow
        Action:
        - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IMAGES_TABLE}
      - Effect: Allow
        Action:
          - s3:DeleteObject
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*
  
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: images/{imgId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
      Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*
    - Effect: Allow
      Action:
        - dynamodb:UpdateItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IMAGES_TABLE}
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IMAGES_TABLE}
      
  AnalyzeImage:
    handler: src/lambda/rekognition/analyzeImg.handler
    events:
      - sns:
          arn:
            Fn::Join:
              - ':'
              - - arn:aws:sns
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - ${self:custom.uploadTopicName}
          topicName: ${self:custom.uploadTopicName}
    iamRoleStatements:
    - Effect: Allow
      Action:
        - rekognition:DetectLabels
      Resource: "*"
    - Effect: Allow
      Action:
        - dynamodb:UpdateItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IMAGES_TABLE}
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IMAGES_TABLE}/index/${self:provider.environment.IMAGESID_INDEX}
    - Effect: Allow
      Action:
        - SNS:Publish
      Resource:
        Fn::Join:
              - ':'
              - - arn:aws:sns
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - ${self:custom.tagTopicName}
    
  CreateTags:
    handler: src/lambda/tags/createTags.handler
    events:
      - sns:
          arn:
            Fn::Join:
              - ':'
              - - arn:aws:sns
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - ${self:custom.tagTopicName}
          topicName: ${self:custom.tagTopicName}
    iamRoleStatements:
      - Effect: Allow
        Action:
        - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IMAGES_TABLE} 


resources:
  Resources:
    ImagesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
          - AttributeName: imgId
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.IMAGES_TABLE}
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.IMAGES_CREATED_AT_INDEX}
            KeySchema:
              - AttributeName: PK
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL # What attributes will be copied to an index  
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.IMAGESID_INDEX}
            KeySchema:
              - AttributeName: imgId
                KeyType: HASH
              - AttributeName: PK
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
                
    
    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.IMAGES_S3_BUCKET}
        NotificationConfiguration:
          TopicConfigurations:
            - Event: s3:ObjectCreated:Put
              Topic: !Ref ImagesUploadTopic
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket 
    
    SNSTopicPolicy:
      Type: AWS::SNS::TopicPolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                AWS: "*"
              Action: sns:Publish
              Resource:
                !Ref ImagesUploadTopic
              Condition:
                ArnLike:
                  AWS:SourceArn: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}
        Topics:
          - !Ref ImagesUploadTopic

    ImagesUploadTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: Image upload bucket topic
        TopicName: ${self:custom.uploadTopicName}
    
    TagCreationTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: Image upload bucket topic
        TopicName: ${self:custom.tagTopicName}

    

    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi
    
    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false
    
    RequestParamValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-param-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: false
        ValidateRequestParameters: true
    